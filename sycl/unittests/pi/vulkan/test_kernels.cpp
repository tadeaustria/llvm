//==---- test_kernels.cpp --- PI unit tests --------------------------------==//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#include "gtest/gtest.h"

#include "TestGetPlugin.hpp"
#include <CL/sycl.hpp>
#include <CL/sycl/detail/pi.hpp>
#include <detail/plugin.hpp>
#include <pi_vulkan.hpp>

// PI_VULKAN has no additional arguments
#define NUM_IMPLICIT_ARGS 0

using namespace cl::sycl;

struct VulkanKernelsTest : public ::testing::Test {

protected:
  detail::plugin plugin = pi::initializeAndGet(backend::vulkan);
  pi_platform platform_;
  pi_device device_;
  pi_context context_;
  pi_queue queue_;

  void SetUp() override {
    pi_uint32 numPlatforms = 0;
    ASSERT_EQ(plugin.getBackend(), backend::vulkan);

    ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piPlatformsGet>(
                  0, nullptr, &numPlatforms)),
              PI_SUCCESS)
        << "piPlatformsGet failed.\n";

    ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piPlatformsGet>(
                  numPlatforms, &platform_, nullptr)),
              PI_SUCCESS)
        << "piPlatformsGet failed.\n";

    ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piDevicesGet>(
                  platform_, PI_DEVICE_TYPE_GPU, 1, &device_, nullptr)),
              PI_SUCCESS);
    ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piContextCreate>(
                  nullptr, 1, &device_, nullptr, nullptr, &context_)),
              PI_SUCCESS);
    ASSERT_NE(context_, nullptr);

    ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piQueueCreate>(
                  context_, device_, 0, &queue_)),
              PI_SUCCESS);
    ASSERT_NE(queue_, nullptr);
    ASSERT_EQ(queue_->Context_, context_);
  }

  void TearDown() override {
    plugin.call<detail::PiApiKind::piDeviceRelease>(device_);
    plugin.call<detail::PiApiKind::piQueueRelease>(queue_);
    plugin.call<detail::PiApiKind::piContextRelease>(context_);
  }

  VulkanKernelsTest() = default;

  ~VulkanKernelsTest() = default;
};

// Hard coded shaders for testing
// compiled by 'glslvalidator' and hexified using 'xxd'

//// #version 450
////
////// compile me using:
////// glslangValidator .\oneParam.comp -e oneParam --source-entrypoint main -V -o oneParam.comp.spv
////
//// layout(local_size_x_id = 100) in;
//// layout(local_size_y_id = 101) in;
//// layout(local_size_z_id = 102) in;
////
//// // Binding 0 : Position storage buffer
//// layout(binding = 0) buffer Pos { int anInteger; };
////
//// void oneParam() { anInteger += 42; }
unsigned char oneParam_spv[] = {
    0x03, 0x02, 0x23, 0x07, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x08, 0x00,
    0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x47, 0x4c, 0x53, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30,
    0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x06, 0x00, 0x05, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x6f, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
    0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x06, 0x00, 0x04, 0x00, 0x00, 0x00,
    0x11, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00,
    0xc2, 0x01, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x04, 0x00, 0x00, 0x00,
    0x6f, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x00, 0x00, 0x00, 0x00,
    0x05, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x50, 0x6f, 0x73, 0x00,
    0x06, 0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x00, 0x00, 0x00,
    0x05, 0x00, 0x03, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x48, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x03, 0x00,
    0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00,
    0x09, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x47, 0x00, 0x04, 0x00, 0x09, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x12, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00,
    0x13, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00,
    0x47, 0x00, 0x04, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x66, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x16, 0x00, 0x00, 0x00,
    0x0b, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x21, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00,
    0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x03, 0x00,
    0x07, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
    0x3b, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00,
    0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
    0x20, 0x00, 0x04, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, 0x11, 0x00, 0x00, 0x00,
    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x04, 0x00,
    0x11, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x32, 0x00, 0x04, 0x00, 0x11, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x04, 0x00, 0x11, 0x00, 0x00, 0x00,
    0x14, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00,
    0x15, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
    0x33, 0x00, 0x06, 0x00, 0x15, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00,
    0x12, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
    0x36, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00,
    0x05, 0x00, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x0c, 0x00, 0x00, 0x00,
    0x0d, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
    0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00,
    0x0d, 0x00, 0x00, 0x00, 0x80, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00,
    0x0f, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
    0x41, 0x00, 0x05, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
    0x09, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00,
    0x10, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0xfd, 0x00, 0x01, 0x00,
    0x38, 0x00, 0x01, 0x00};
const unsigned char *oneParam_spv_ptr = oneParam_spv;
size_t oneParam_spv_len = 676;

//// #version 450
////
////// compile me using:
////// glslangValidator .\twoParam.comp -e twoParam --source-entrypoint main -V -o twoParam.comp.spv
////
//// layout(local_size_x_id = 100) in;
//// layout(local_size_y_id = 101) in;
//// layout(local_size_z_id = 102) in;
////
////  Binding 0 : Position storage buffer
//// layout(binding = 0) buffer Pos { int anInteger; };
////
//// layout(binding = 1) buffer Pos2 { int anotherInteger; };
////
//// void twoParam() {
////   anInteger += 42;
////   anotherInteger += 42;
//// }
unsigned char twoParam_spv[] = {
    0x03, 0x02, 0x23, 0x07, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x08, 0x00,
    0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x47, 0x4c, 0x53, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30,
    0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x06, 0x00, 0x05, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x74, 0x77, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d,
    0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x06, 0x00, 0x04, 0x00, 0x00, 0x00,
    0x11, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00,
    0xc2, 0x01, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x04, 0x00, 0x00, 0x00,
    0x74, 0x77, 0x6f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x00, 0x00, 0x00, 0x00,
    0x05, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x50, 0x6f, 0x73, 0x00,
    0x06, 0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x61, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x00, 0x00, 0x00,
    0x05, 0x00, 0x03, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x05, 0x00, 0x04, 0x00, 0x11, 0x00, 0x00, 0x00, 0x50, 0x6f, 0x73, 0x32,
    0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x07, 0x00, 0x11, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x61, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49,
    0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x00, 0x00, 0x05, 0x00, 0x03, 0x00,
    0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00,
    0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x09, 0x00, 0x00, 0x00,
    0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00,
    0x09, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x48, 0x00, 0x05, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x03, 0x00,
    0x11, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00,
    0x13, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x47, 0x00, 0x04, 0x00, 0x13, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x19, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00,
    0x1a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00,
    0x47, 0x00, 0x04, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x66, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x1d, 0x00, 0x00, 0x00,
    0x0b, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x21, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00,
    0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x03, 0x00,
    0x07, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
    0x3b, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00,
    0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00,
    0x20, 0x00, 0x04, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x03, 0x00, 0x11, 0x00, 0x00, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x12, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00,
    0x12, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x04, 0x00, 0x18, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x04, 0x00, 0x18, 0x00, 0x00, 0x00,
    0x19, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x04, 0x00,
    0x18, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x32, 0x00, 0x04, 0x00, 0x18, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x1c, 0x00, 0x00, 0x00,
    0x18, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x33, 0x00, 0x06, 0x00,
    0x1c, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00,
    0x1a, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x36, 0x00, 0x05, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00,
    0x41, 0x00, 0x05, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
    0x09, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
    0x80, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
    0x0e, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00,
    0x0c, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
    0x0a, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00,
    0x0f, 0x00, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x0c, 0x00, 0x00, 0x00,
    0x14, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
    0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00,
    0x14, 0x00, 0x00, 0x00, 0x80, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00,
    0x16, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
    0x41, 0x00, 0x05, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00,
    0x13, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00,
    0x17, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0xfd, 0x00, 0x01, 0x00,
    0x38, 0x00, 0x01, 0x00};
const unsigned char *twoParam_spv_ptr = twoParam_spv;
size_t twoParam_spv_len = 928;

TEST_F(VulkanKernelsTest, PICreateProgramAndKernel) {
pi_program prog;
  pi_int32 binary_status = PI_SUCCESS;
  ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piProgramCreateWithBinary>(
                context_, 1, &device_, &oneParam_spv_len, &oneParam_spv_ptr,
                &binary_status, &prog)),
            PI_SUCCESS);

  ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piProgramBuild>(
                prog, 1, &device_, "", nullptr, nullptr)),
            PI_SUCCESS);

  pi_kernel kern;
  ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piKernelCreate>(
                prog, "oneParam", &kern)),
            PI_SUCCESS);
  ASSERT_NE(kern, nullptr);
}

TEST_F(VulkanKernelsTest, PIKernelArgumentSimple) {
  pi_program prog;
  /// NOTE: `binary_status` currently unsused in the CUDA backend but in case we
  /// use it at some point in the future, pass it anyway and check the result.
  /// Same goes for all the other tests in this file.
  pi_int32 binary_status = PI_SUCCESS;
  ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piProgramCreateWithBinary>(
                context_, 1, &device_, &oneParam_spv_len, &oneParam_spv_ptr,
                &binary_status, &prog)),
      PI_SUCCESS);
  ASSERT_EQ(binary_status, PI_SUCCESS);

  ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piProgramBuild>(
                prog, 1, &device_, "", nullptr, nullptr)),
            PI_SUCCESS);

  pi_kernel kern;
  ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piKernelCreate>(
                prog, "oneParam", &kern)),
            PI_SUCCESS);

  int number = 10;
  ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piKernelSetArg>(
                kern, 0, sizeof(int), &number)),
            PI_SUCCESS);
  const auto &kernArgs = kern->Arguments;
  ASSERT_EQ(kernArgs.size(), (size_t)1 + NUM_IMPLICIT_ARGS);
  int storedValue = 0;
  ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piEnqueueMemBufferRead>(
                queue_, kernArgs.at(0), true, 0, sizeof(int), &storedValue, 0,
                nullptr, nullptr)),
            PI_SUCCESS);
  ASSERT_EQ(storedValue, number);
}

TEST_F(VulkanKernelsTest, PIKernelArgumentSetTwice) {

  pi_program prog;
  pi_int32 binary_status = PI_SUCCESS;
  ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piProgramCreateWithBinary>(
                context_, 1, &device_, &twoParam_spv_len, &twoParam_spv_ptr,
                &binary_status, &prog)),
            PI_SUCCESS);
  ASSERT_EQ(binary_status, PI_SUCCESS);

  ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piProgramBuild>(
                prog, 1, &device_, "", nullptr, nullptr)),
            PI_SUCCESS);

  pi_kernel kern;
  ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piKernelCreate>(
                prog, "twoParam", &kern)),
            PI_SUCCESS);

  int number = 10;
  ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piKernelSetArg>(
                kern, 0, sizeof(int), &number)),
            PI_SUCCESS);
  const auto &kernArgs = kern->Arguments;
  ASSERT_EQ(kernArgs.size(), (size_t)1 + NUM_IMPLICIT_ARGS);
  int storedValue = 0;
  ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piEnqueueMemBufferRead>(
                queue_, kernArgs.at(0), true, 0, sizeof(int), &storedValue, 0,
                nullptr, nullptr)),
            PI_SUCCESS);
  ASSERT_EQ(storedValue, number);

  int otherNumber = 934;
  ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piKernelSetArg>(
                kern, 0, sizeof(int), &otherNumber)),
            PI_SUCCESS);
  ASSERT_EQ(kernArgs.size(), (size_t)1 + NUM_IMPLICIT_ARGS);
  ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piEnqueueMemBufferRead>(
                queue_, kernArgs.at(0), true, 0, sizeof(int), &storedValue, 0,
                nullptr, nullptr)),
            PI_SUCCESS);
  ASSERT_EQ(storedValue, otherNumber);
}

TEST_F(VulkanKernelsTest, PIKernelSetMemObj) {

  pi_program prog;
  pi_int32 binary_status = PI_SUCCESS;
  ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piProgramCreateWithBinary>(
                context_, 1, &device_, &oneParam_spv_len, &oneParam_spv_ptr,
                &binary_status, &prog)),
            PI_SUCCESS);
  ASSERT_EQ(binary_status, PI_SUCCESS);

  ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piProgramBuild>(
                prog, 1, &device_, "", nullptr, nullptr)),
            PI_SUCCESS);

  pi_kernel kern;
  ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piKernelCreate>(
                prog, "oneParam", &kern)),
            PI_SUCCESS);

  size_t memSize = 1024u;
  pi_mem memObj;
  ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piMemBufferCreate>(
                context_, PI_MEM_FLAGS_ACCESS_RW, memSize, nullptr, &memObj, nullptr)),
            PI_SUCCESS);
  ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piextKernelSetArgMemObj>(
                kern, 0, &memObj)),
            PI_SUCCESS);
  const auto &kernArgs = kern->Arguments;
  ASSERT_EQ(kernArgs.size(), (size_t)1 + NUM_IMPLICIT_ARGS);
  ASSERT_EQ(kernArgs.at(0), memObj);
}

TEST_F(VulkanKernelsTest, PIkerneldispatch) {

  pi_program prog;
  pi_int32 binary_status = PI_SUCCESS;
  ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piProgramCreateWithBinary>(
                context_, 1, &device_, &oneParam_spv_len, &oneParam_spv_ptr,
                &binary_status, &prog)),
            PI_SUCCESS);
  ASSERT_EQ(binary_status, PI_SUCCESS);

  ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piProgramBuild>(
                prog, 1, &device_, "", nullptr, nullptr)),
            PI_SUCCESS);

  pi_kernel kern;
  ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piKernelCreate>(
                prog, "oneParam", &kern)),
            PI_SUCCESS);

  size_t memSize = 1024u;
  pi_mem memObj;
  ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piMemBufferCreate>(
                context_, PI_MEM_FLAGS_ACCESS_RW, memSize, nullptr, &memObj, nullptr)),
            PI_SUCCESS);

  ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piextKernelSetArgMemObj>(
                kern, 0, &memObj)),
            PI_SUCCESS);

  size_t workDim = 1;
  size_t globalWorkOffset[] = {0};
  size_t globalWorkSize[] = {1};
  size_t localWorkSize[] = {1};
  ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piEnqueueKernelLaunch>(
                queue_, kern, workDim, globalWorkOffset, globalWorkSize,
                localWorkSize, 0, nullptr, nullptr)),
            PI_SUCCESS);

  ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piMemRelease>(memObj)),
            PI_SUCCESS);
}

TEST_F(VulkanKernelsTest, PIkerneldispatchTwo) {

  pi_program prog;
  pi_int32 binary_status = PI_SUCCESS;
  ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piProgramCreateWithBinary>(
                context_, 1, &device_, &twoParam_spv_len, &twoParam_spv_ptr,
                &binary_status, &prog)),
            PI_SUCCESS);
  ASSERT_EQ(binary_status, PI_SUCCESS);

  ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piProgramBuild>(
                prog, 1, &device_, "", nullptr, nullptr)),
            PI_SUCCESS);

  pi_kernel kern;
  ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piKernelCreate>(
                prog, "twoParam", &kern)),
            PI_SUCCESS);

  size_t memSize = 1024u;
  pi_mem memObj;
  ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piMemBufferCreate>(
                context_, PI_MEM_FLAGS_ACCESS_RW, memSize, nullptr, &memObj, nullptr)),
            PI_SUCCESS);

  pi_mem memObj2;
  ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piMemBufferCreate>(
                context_, PI_MEM_FLAGS_ACCESS_RW, memSize, nullptr, &memObj2, nullptr)),
            PI_SUCCESS);

  ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piextKernelSetArgMemObj>(
                kern, 0, &memObj)),
            PI_SUCCESS);

  ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piextKernelSetArgMemObj>(
                kern, 1, &memObj2)),
            PI_SUCCESS);

  size_t workDim = 1;
  size_t globalWorkOffset[] = {0};
  size_t globalWorkSize[] = {1};
  size_t localWorkSize[] = {1};
  ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piEnqueueKernelLaunch>(
                queue_, kern, workDim, globalWorkOffset, globalWorkSize,
                localWorkSize, 0, nullptr, nullptr)),
            PI_SUCCESS);

  ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piMemRelease>(memObj)),
            PI_SUCCESS);
  ASSERT_EQ((plugin.call_nocheck<detail::PiApiKind::piMemRelease>(memObj2)),
            PI_SUCCESS);
}